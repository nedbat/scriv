# Run scriv CI

name: "Test Suite"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PANDOC_VER: 3.6.3

jobs:
  tests:
    name: "Test on ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}-latest"

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Set up Python"
        id: "setup-python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # The last listed Python version is the default.
          python-version: |
            pypy-3.9
            3.9
            3.10
            3.11
            3.12
            3.13

      - name: "Restore cache"
        id: "restore-cache"
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            .tox/
            .venv/
          key: "cache-python-${{ steps.setup-python.outputs.python-version }}-os-${{ runner.os }}-hash-${{ hashFiles('tox.ini', 'requirements/*.txt') }}"

      - name: "Identify venv path"
        shell: "bash"
        env:
          VENV_PATH: ${{ runner.os == 'Windows' && '.venv/Scripts' || '.venv/bin' }}
        run: |
          echo "venv_path=${VENV_PATH}" >> $GITHUB_ENV

      - name: "Install dependencies"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${venv_path}/python -m pip install -U setuptools
          ${venv_path}/python -m pip install -r requirements/tox.txt

      - name: "Install pandoc on Linux"
        # sudo apt-get pandoc: will install a version from 2018!
        if: runner.os == 'Linux'
        run: |
          wget -nv -O pandoc.deb https://github.com/jgm/pandoc/releases/download/${PANDOC_VER}/pandoc-${PANDOC_VER}-1-amd64.deb
          sudo apt install ./pandoc.deb

      - name: "Install pandoc on Mac"
        if: runner.os == 'macOS'
        run: |
          brew install pandoc

      - name: "Install pandoc on Windows"
        if: runner.os == 'Windows'
        run: |
          choco install -y -r --no-progress pandoc

      - name: "Run tox"
        run: |
          ${venv_path}/python -m tox -m ci-tests

      - name: "Upload coverage data"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: covdata-${{ matrix.os }}
          path: .coverage.*
          include-hidden-files: true

  coverage:
    name: Coverage
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Set up Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: 'requirements/*.txt'

      - name: "Install dependencies"
        run: |
          python -m pip install -U setuptools
          python -m pip install -r requirements/tox.txt

      - name: "Download coverage data"
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: covdata-*
          merge-multiple: true

      - name: "Combine and report"
        run: |
          python -m tox -e coverage
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

      - name: "Make badge"
        if: (github.repository == 'nedbat/scriv') && (github.ref == 'refs/heads/main')
        # https://gist.github.com/nedbat/5a304c1c779d4bcc57be95f847e9327f
        uses: schneegans/dynamic-badges-action@e9a478b16159b4d31420099ba146cdc50f134483 # v1.7.0
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          # https://github.com/settings/tokens/969369418
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 5a304c1c779d4bcc57be95f847e9327f
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}

  docs:
    name: Docs
    runs-on: ubuntu-latest

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Set up Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.9"
          cache: pip
          cache-dependency-path: 'requirements/*.txt'

      - name: "Install dependencies"
        run: |
          python -m pip install -U setuptools
          python -m pip install -r requirements/tox.txt

      - name: "Build docs"
        run: |
          python -m tox -e docs

  quality:
    name: Linters etc
    runs-on: ubuntu-latest

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Set up Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.9"
          cache: pip
          cache-dependency-path: 'requirements/*.txt'

      - name: "Install dependencies"
        run: |
          python -m pip install -U setuptools
          python -m pip install -r requirements/tox.txt

      - name: "Linters etc"
        run: |
          python -m tox -e quality
